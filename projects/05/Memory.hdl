// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    /*
    if high bit not set, address in ram memory
    if high bit set and second highest bit not set, address in screen memory
    if the 2 highest bits are set, then >= 0x6000
    if the 2 highest bits are set and any other bit is set, then > 0x6000 INVALID

    0x0000->0x3FFF is RAM
    0x4000->0x5FFF is screen
        0x4000->0x4FFF RAM4K chip
        0x5000->0x5FFF RAM4K chip
    0x6000 is keyboard

    high-bits           dest
    00                  ram
    01                  ram
    10                  screen
    11                  keyboard / invalid

    */
    DMux4Way(in=load, sel=address[13..14], a=ram1, b=ram2, c=screen, d=garbage);
    Or(a=ram1, b=ram2, out=ram);
    //DMux(in=screen, sel=address[12], a=screen1, b=screen2);

    // RAM
    RAM16K(in=in, load=ram, address=address[0..13], out=ramout);
    // SCREEN
    Screen(in=in, load=screen, address=address[0..12], out=screenout);
    //RAM4K(in=in, load=screen1, address=address[0..11], out=screen1out);
    //RAM4K(in=in, load=screen2, address=address[0..11], out=screen2out);
    //Mux16(a=screen1out, b=screen2out, sel=address[12], out=screenout);
    // KEYBOARD
    Keyboard(out=keyboard);

    Mux4Way16(a=ramout, b=ramout, c=screenout, d=keyboard, sel=address[13..14], out=out);
}
